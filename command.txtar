-- perms --
#!/usr/bin/env bash

chmod +x token_cleanup
chmod +x cleanup*
chmod +x command*

-- cleanup_files --
#!/usr/bin/env bash

rm -rf my_project
rm -f start-expanded
rm -f perms
rm -rf mod
rm -f payload[0-9][0-9]*
rm -f cleanup
rm -f token_cleanup
rm -f command[0-9][0-9]*
rm -f perms
rm -f cleanup_files

-- token_cleanup --
#!/usr/bin/env bash

proj=streambox/faris
projenc=$(printf %s $proj | jq -s -R -r @uri)

deploy_tokens=$(glab api /projects/$projenc/deploy_tokens)
token_ids=$(echo "$deploy_tokens" | jq -r '.[] | select(.name == "My deploy token") | .id')

for token_id in $token_ids; do
  glab api --method DELETE /projects/$projenc/deploy_tokens/$token_id
done

-- command02 --
#!/usr/bin/env bash

payload=payload02.json
outfile=command02-output.json
proj=streambox/faris
projenc=$(printf %s $proj | jq -s -R -r @uri)

cat >$payload <<EOF
{
 "name": "My deploy token",
 "expires_at": "2024-09-10",
 "scopes": "read_repository"
}
EOF

glab api --method POST --header "Content-Type: application/json" \
 --input $payload \
 /projects/$projenc/deploy_tokens | jq | tee $outfile

export GITLAB_DEPLOY_USERNAME=$(jq -r .username $outfile)
export GITLAB_DEPLOY_TOKEN=$(jq -r .token $outfile)
export RANDOM=$RANDOM

envsubst '$GITLAB_DEPLOY_TOKEN,$GITLAB_DEPLOY_USERNAME,$RANDOM' <start >start-expanded
envsubst '$GITLAB_DEPLOY_TOKEN,$GITLAB_DEPLOY_USERNAME,$RANDOM' <my_project/run >my_project/run-expanded

-- command01 --
#!/usr/bin/env bash

payload=payload01.json
outfile=command01-output.json
proj=streambox/faris
projenc=$(printf %s $proj | jq -s -R -r @uri)

cat >$payload <<EOF
{
 "name": "My deploy token",
 "expires_at": "2024-09-10",
 "scopes": [
   "read_repository",
   "write_package_registry"
 ]
}
EOF

glab api --method POST --header "Content-Type: application/json" \
 --input $payload \
 /projects/$projenc/deploy_tokens | jq | tee $outfile

export GITLAB_DEPLOY_USERNAME=$(jq -r .username $outfile)
export GITLAB_DEPLOY_TOKEN=$(jq -r .token $outfile)
export RANDOM=$RANDOM

envsubst '$GITLAB_DEPLOY_TOKEN,$GITLAB_DEPLOY_USERNAME,$RANDOM' <start >start-expanded
envsubst '$GITLAB_DEPLOY_TOKEN,$GITLAB_DEPLOY_USERNAME,$RANDOM' <my_project/run >my_project/run-expanded
